# Generated by Django 3.2 on 2021-09-01 15:11

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('projects', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Notebook',
            fields=[
                ('slug',
                 models.SlugField(help_text='Unique alphanumeric string which identifies the project.', max_length=64, primary_key=True, serialize=False,
                                  verbose_name='Slug')),
                ('name', models.CharField(help_text='The display name of the notebook.', max_length=512, verbose_name='Name')),
                ('container_image', models.CharField(
                    choices=[('jupyter/base-notebook', 'Base'), ('jupyter/minimal-notebook', 'Python'), ('jupyter/scipy-notebook', 'Python (Scientific)'),
                             ('jupyter/tensorflow-notebook', 'Python (Tensorflow)'), ('jupyter/r-notebook', 'Python + R'),
                             ('jupyter/pyspark-notebook', 'Python (Scientific) + Apache Spark'),
                             ('jupyter/all-spark-notebook', 'Python (Scientific) + Scala + R + Apache Spark')],
                    help_text='The Docker image to run for this notebook.', max_length=256, verbose_name='Container image')),
                ('container_id',
                 models.CharField(help_text='The id of the Docker container running this notebook. If null, the notebook is not running.', max_length=256,
                                  null=True, verbose_name='Container ID')),
                ('volume_id', models.CharField(
                    help_text="The id of the Docker volume containing the data of this notebook. If null, the notebook doesn't currently have a volume, and will be created the next time the container is started.",
                    max_length=256, null=True, verbose_name='Volume ID')),
                ('port', models.IntegerField(
                    help_text='The port number of the local machine at which the container is available. If null, the notebook is not running.', null=True,
                    validators=[django.core.validators.MinValueValidator(49152), django.core.validators.MaxValueValidator(65535)],
                    verbose_name='Local port number')),
                ('locked_by', models.ForeignKey(help_text='The user who locked this notebook. If null, the notebook is unlocked.', null=True,
                                                on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(help_text='The project this notebook belongs to.', on_delete=django.db.models.deletion.CASCADE,
                                              to='projects.researchproject')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
